template is an configuration for the pod within the configuration of the container.

pod is an abstraction over a container
deployment is an abstraction over a pod

container --> pod --> deployment

deployment is for stateless apps(i.e apps that dont have changing data)
stateful sets are used for stateful apps like db's since u need to know which pod is reading from the db, which is writing to the db etc,.


service is required only for the pod which ___
no port number if no service(ex: worker app)

each node hosts one or more pods

docker build -t my-image .
docker run -d -p 8080:80 --name my-container my-image

pipeline
np,snp server
patr
keycloak - diff clients and diff env
ingress


kubeproxy
container runtime
kubelete - it is an agent present in each of the nodes, responsible for managing cnts



kubectl apply -f postgres-statefulset.yaml
kubectl apply -f postgres-service.yaml
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml



To ensure that your Flask application and PostgreSQL database are deployed and functioning correctly in your Minikube cluster, you can follow these steps to verify their status:

1. **Check Deployments and Pods:**

Use the `kubectl get deployments` command to check the status of your deployments:

```bash
kubectl get deployments
```

This command will list all deployments in your cluster along with their current status (e.g., number of replicas, available replicas).

Similarly, you can use `kubectl get pods` to list all pods in your cluster:

```bash
kubectl get pods
```

This will show the status of each pod, including whether they are running or in a different state.

2. **Check Services:**

To verify that your services are running and correctly exposed, you can use the following command:

```bash
kubectl get services
```

This will list all services in your cluster along with their types, cluster IPs, and external endpoints (if applicable).

3. **Accessing Your Flask Application:**

If you've configured a LoadBalancer type service for your Flask application, you can retrieve the external IP address to access it. Use the following command:

```bash
minikube service cms-flask-service --url
```

This will provide you with the URL to access your Flask application.

If you're using a NodePort or ClusterIP service type, you can access your application using the Minikube IP and the specified port.

4. **Checking PostgreSQL Connectivity:**

To verify that your Flask application can connect to the PostgreSQL database, you can run a test within your application that interacts with the database, such as querying data or performing CRUD operations.

You can also use the following commands to check the status of your PostgreSQL StatefulSet and Service:

```bash
kubectl get statefulsets
kubectl get services postgres-service
```

These commands will show you the status of your PostgreSQL StatefulSet and Service, including whether they are running and any associated endpoints.

By following these steps and verifying the status of your deployments, pods, services, and database connectivity, you can ensure that your Flask application and PostgreSQL database are successfully deployed and functioning within your Minikube cluster.

daemonsets - copy of the po

Docker uses LXT containers